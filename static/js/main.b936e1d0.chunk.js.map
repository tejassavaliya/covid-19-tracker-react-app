{"version":3,"sources":["container/InfoBox.js","Utility.js","container/Map.js","container/Table.js","container/LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","total","active","isRed","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","i","key","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setInputCountry","setCountryInfo","setCountries","mapCountries","setMapCountries","tableData","setTableData","setCasesType","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","name","iso2","getCountriesData","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b936e1d0.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport \"./InfoBox.css\";\r\n\r\nfunction InfoBox({  title, cases, total, active, isRed, ...props }) {\r\n    return (\r\n        <Card\r\n            onClick={props.onClick}\r\n            className={`infoBox ${active && \"infoBox--selected\"} ${\r\n                isRed && \"infoBox--red\"\r\n            }`} >\r\n            <CardContent>\r\n                <Typography className={\"infoBox__title\"} color={\"textSecondary\"}>\r\n                    {title}\r\n                </Typography>\r\n\r\n                <h2 className={\"infoBox__cases\"}>{cases}</h2>\r\n\r\n                <Typography className={\"infoBox__total\"} color={\"textSecondary\"}>\r\n                    {total} Total\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n        hex: \"#CC1034\",\r\n        rgb: \"rgb(204, 16, 52)\",\r\n        half_op: \"rgba(204, 16, 52, 0.5)\",\r\n        multiplier: 800,\r\n    },\r\n    recovered: {\r\n        hex: \"#7dd71d\",\r\n        rgb: \"rgb(125, 215, 29)\",\r\n        half_op: \"rgba(125, 215, 29, 0.5)\",\r\n        multiplier: 1200,\r\n    },\r\n    deaths: {\r\n        hex: \"#fb4443\",\r\n        rgb: \"rgb(251, 68, 67)\",\r\n        half_op: \"rgba(251, 68, 67, 0.5)\",\r\n        multiplier: 2000,\r\n    },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n    let sortedData = [...data];\r\n    sortedData.sort((a, b) => {\r\n        if (a.cases > b.cases) {\r\n            return -1;\r\n        } else {\r\n            return 1;\r\n        }\r\n    });\r\n    return sortedData;\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n    stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n    data.map((country) => (\r\n        <Circle\r\n            center={[country.countryInfo.lat, country.countryInfo.long]}\r\n            color={casesTypeColors[casesType].hex}\r\n            fillColor={casesTypeColors[casesType].hex}\r\n            fillOpacity={0.4}\r\n            radius={\r\n                Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n            }\r\n        >\r\n            <Popup>\r\n                <div className=\"info-container\">\r\n                    <div\r\n                        className=\"info-flag\"\r\n                        style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n                    >&nbsp;</div>\r\n                    <div className=\"info-name\">{country.country}</div>\r\n                    <div className=\"info-confirmed\">\r\n                        Cases: {numeral(country.cases).format(\"0,0\")}\r\n                    </div>\r\n                    <div className=\"info-recovered\">\r\n                        Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n                    </div>\r\n                    <div className=\"info-deaths\">\r\n                        Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n                    </div>\r\n                </div>\r\n            </Popup>\r\n        </Circle>\r\n    ));","import React from 'react';\r\nimport './Map.css';\r\nimport { Map as LeafletMap, TileLayer} from \"react-leaflet\";\r\nimport {showDataOnMap} from \"../Utility\";\r\n\r\n\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap center={center} zoom={zoom}>\r\n                <TileLayer\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                />\r\n                {showDataOnMap(countries, casesType)}\r\n            </LeafletMap>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Map;","import React from \"react\";\r\nimport './Table.css';\r\n\r\nfunction Table({ countries }) {\r\n    return (\r\n        <div className=\"table\">\r\n            {countries.map(({country, cases}, i) => (\r\n                <tr key={i}>\r\n                    <td>{country}</td>\r\n                    <td>\r\n                        <strong>{cases}</strong>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table;","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n    legend: {\r\n        display: false,\r\n    },\r\n    elements: {\r\n        point: {\r\n            radius: 0,\r\n        },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n        mode: \"index\",\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function (tooltipItem, data) {\r\n                return numeral(tooltipItem.value).format(\"+0,0\");\r\n            },\r\n        },\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                type: \"time\",\r\n                time: {\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat: \"ll\",\r\n                },\r\n            },\r\n        ],\r\n        yAxes: [\r\n            {\r\n                gridLines: {\r\n                    display: false,\r\n                },\r\n                ticks: {\r\n                    // Include a dollar sign in the ticks\r\n                    callback: function (value, index, values) {\r\n                        return numeral(value).format(\"0a\");\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n    let chartData = [];\r\n    let lastDataPoint;\r\n    for (let date in data.cases) {\r\n        if (lastDataPoint) {\r\n            let newDataPoint = {\r\n                x: date,\r\n                y: data[casesType][date] - lastDataPoint,\r\n            };\r\n            chartData.push(newDataPoint);\r\n        }\r\n        lastDataPoint = data[casesType][date];\r\n    }\r\n    return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType }) {\r\n    const [data, setData] = useState({});\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n                .then((response) => {\r\n                    return response.json();\r\n                })\r\n                .then((data) => {\r\n                    let chartData = buildChartData(data, casesType);\r\n                    setData(chartData);\r\n                    console.log(chartData);\r\n                    // buildChart(chartData);\r\n                });\r\n        };\r\n\r\n        fetchData();\r\n    }, [casesType]);\r\n\r\n    return (\r\n        <div>\r\n            {data?.length > 0 && (\r\n                <Line\r\n                    data={{\r\n                        datasets: [\r\n                            {\r\n                                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                                borderColor: \"#CC1034\",\r\n                                data: data,\r\n                            },\r\n                        ],\r\n                    }}\r\n                    options={options}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LineGraph;","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport { FormControl, Select, MenuItem, Card, CardContent } from '@material-ui/core';\nimport InfoBox from \"./container/InfoBox\";\nimport Map from \"./container/Map\";\nimport Table from \"./container/Table\";\nimport {sortData, prettyPrintStat } from \"./Utility\";\nimport LineGraph from \"./container/LineGraph\";\nimport numeral from \"numeral\";\nimport \"leaflet/dist/leaflet.css\";\n\nconst App = () => {\n    const [country, setInputCountry] = useState(\"worldwide\");\n    const [countryInfo, setCountryInfo] = useState({});\n    const [countries, setCountries] = useState([]);\n    const [mapCountries, setMapCountries] = useState([]);\n    const [tableData, setTableData] = useState([]);\n    const [casesType, setCasesType] = useState(\"cases\");\n    const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n    const [mapZoom, setMapZoom] = useState(3);\n\n    useEffect(() => {\n        fetch(\"https://disease.sh/v3/covid-19/all\")\n            .then((response) => response.json())\n            .then((data) => {\n                setCountryInfo(data);\n            });\n    }, []);\n\n    useEffect(() => {\n        const getCountriesData = async () => {\n            fetch(\"https://disease.sh/v3/covid-19/countries\")\n                .then((response) => response.json())\n                .then((data) => {\n                    const countries = data.map((country) => ({\n                        name: country.country,\n                        value: country.countryInfo.iso2,\n                    }));\n                    let sortedData = sortData(data);\n                    setCountries(countries);\n                    setMapCountries(data);\n                    setTableData(sortedData);\n                });\n        };\n\n        getCountriesData();\n    }, []);\n\n    console.log(casesType);\n\n    const onCountryChange = async (e) => {\n        const countryCode = e.target.value;\n\n        const url =\n            countryCode === \"worldwide\"\n                ? \"https://disease.sh/v3/covid-19/all\"\n                : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n        await fetch(url)\n            .then((response) => response.json())\n            .then((data) => {\n                setInputCountry(countryCode);\n                setCountryInfo(data);\n                setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n                setMapZoom(4);\n            });\n    };\n\n    return (\n        <div className=\"app\">\n            <div className=\"app__left\">\n                <div className=\"app__header\">\n                    <h1>COVID-19 Tracker</h1>\n                    <FormControl className=\"app__dropdown\">\n                        <Select\n                            variant=\"outlined\"\n                            value={country}\n                            onChange={onCountryChange}\n                        >\n                            <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n                            {countries.map((country) => (\n                                <MenuItem value={country.value}>{country.name}</MenuItem>\n                            ))}\n                        </Select>\n                    </FormControl>\n                </div>\n                <div className=\"app__stats\">\n                    <InfoBox\n                        onClick={(e) => setCasesType(\"cases\")}\n                        title=\"Coronavirus Cases\"\n                        isRed\n                        active={casesType === \"cases\"}\n                        cases={prettyPrintStat(countryInfo.todayCases)}\n                        total={numeral(countryInfo.cases).format(\"0.0a\")}\n                    />\n                    <InfoBox\n                        onClick={(e) => setCasesType(\"recovered\")}\n                        title=\"Recovered\"\n                        active={casesType === \"recovered\"}\n                        cases={prettyPrintStat(countryInfo.todayRecovered)}\n                        total={numeral(countryInfo.recovered).format(\"0.0a\")}\n                    />\n                    <InfoBox\n                        onClick={(e) => setCasesType(\"deaths\")}\n                        title=\"Deaths\"\n                        isRed\n                        active={casesType === \"deaths\"}\n                        cases={prettyPrintStat(countryInfo.todayDeaths)}\n                        total={numeral(countryInfo.deaths).format(\"0.0a\")}\n                    />\n                </div>\n                <Map\n                    countries={mapCountries}\n                    casesType={casesType}\n                    center={mapCenter}\n                    zoom={mapZoom}\n                />\n            </div>\n            <Card className=\"app__right\">\n                <CardContent>\n                    <div className=\"app__information\">\n                        <h3>Live Cases by Country</h3>\n                        <Table countries={tableData} />\n                        <h3>Worldwide new {casesType}</h3>\n                        <LineGraph casesType={casesType} />\n                    </div>\n                </CardContent>\n            </Card>\n        </div>\n    );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}